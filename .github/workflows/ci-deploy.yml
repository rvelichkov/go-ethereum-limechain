name: CI Deploy

on:
  pull_request:
    types: [closed]

jobs:
  deploy-contracts:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:Deploy')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Start local devnet
        run: |
          docker compose -f devnet/docker-compose.yml up -d

      - name: Setup Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm ci 
        working-directory: ./hardhat

      - name: Deploy contracts 
        run: |
          max_attempts=30
          attempt=0
          while ! curl -s http://localhost:8545 -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":67}" > /dev/null; do
            if [ $attempt -eq $max_attempts ]; then
              echo "Blockchain failed to start after $max_attempts attempts."
              exit 1
            fi
            attempt=$((attempt+1))
            echo "Waiting for blockchain to be ready... (Attempt $attempt)"
            sleep 5
          done
          echo "Blockchain is ready. Proceeding with contract deployment."

          yes | npx hardhat ignition deploy ./ignition/modules/Token.js --network devnet
        working-directory: ./hardhat

      - name: Verify contract Deployment
        run: |
          # Set the number of attempts and delay between attempts
          MAX_ATTEMPTS=12
          DELAY_SECONDS=10
          attempt=0 
          deploy_success=false

          while [ $attempt -lt $MAX_ATTEMPTS ]; do 
            attempt=$((attempt+1))
            echo "Attempt $attempt of $MAX_ATTEMPTS"

            if [ -d "ignition/deployments" ]; then
              # Navigate to the deployments directory
              cd ignition/deployments
              # Find the chain directory
              CHAIN_DIR=$(ls -d chain-* | head -n 1)
              if [ -n "$CHAIN_DIR" ]; then
                cd "$CHAIN_DIR"
                # Extract the contract address
                CONTRACT_ADDRESS=$(jq -r '."TokenModule#Token"' deployed_addresses.json)
                echo "Verifying deployment for contract at address: $CONTRACT_ADDRESS"
                RESULT=$(curl -s -X POST -H "Content-Type: application/json" \
                  --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"$CONTRACT_ADDRESS\", \"latest\"],\"id\":1}" \
                  http://localhost:8545)

                # Check if the result is just "0x" (empty bytecode)
                if [ "$(echo $RESULT | jq -r '.result')" != "0x" ]; then
                  echo "Contract deployment verified successfully. Bytecode found at the address."
                  deploy_success=true
                  break
                fi
              else
                echo "No chain directory found in ignition/deployments."
              fi 
            else
              echo "The ignition/deployments directory does not exist."
            fi

            echo "No bytecode found at the address. Retrying in $DELAY_SECONDS seconds..."
            if [ $attempt -lt $MAX_ATTEMPTS ]; then
              sleep $DELAY_SECONDS
            fi
          done

          if [ "$deploy_success" = true ]; then
            echo "DEPLOY_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "Contract deployment verification failed after $MAX_ATTEMPTS attempts."
            echo "DEPLOY_SUCCESS=false" >> $GITHUB_ENV
            exit 1
          fi 
        working-directory: ./hardhat

      - name: Pause and export data directory
        if: env.DEPLOY_SUCCESS == 'true'
        run: |
          echo "Pausing local devnet..."
          docker pause geth-node
          docker cp geth-node:/root/.ethereum ./ethereum_data
        working-directory: ./devnet

      - name: Handle deployment failure
        if: env.DEPLOY_SUCCESS != 'true'
        run: |
          echo "Deployment failed. Stopping devnet and exiting..."
          docker compose -f devnet/docker-compose.yml down
          exit 1
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./devnet
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/go-ethereum-limechain:contracts-deployed

      - name: Run Hardhat tests against predeployed contracts image
        if: success()
        continue-on-error: true
        run: |
          # Run a new container with the predeployed contracts image
          docker run -d -p 8546:8545 --name test-node ${{ secrets.DOCKER_USERNAME }}/go-ethereum-limechain:contracts-deployed

          # Wait for the node to be ready
          max_attempts=30
          attempt=0 
          while ! curl -s http://localhost:8546 -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":67}" > /dev/null; do
            if [ $attempt -eq $max_attempts ]; then
              echo "Node failed to start after $max_attempts attempts."
              exit 1
            fi
            attempt=$((attempt+1))
            echo "Waiting for node to be ready... (Attempt $attempt)"
            sleep 5
          done
          echo "Node is ready. Proceeding with Hardhat tests."

          # Run Hardhat tests
          npx hardhat test --network testnet
        working-directory: ./hardhat
